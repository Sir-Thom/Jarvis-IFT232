!load JarvisLib/basictypes.txt
!load JarvisLib/util.txt
!mute

# init pour faire -1
!(int new 1)
!ref k1
!(int new 2)
!ref k2
!(k1 - k2)
!ref k

#branch true: si nb négatif fait x * -1
!{ x .
    !(x * k)
}
!ref negate

# branch false: retourne lui-même
!{ x .
    x
}
!ref identity

!(ifelse new negate identity)
# func abs
!ref absCondition
!{ x .
    !(x < 0)
    !ref isNegative

    !(isNegative value)
    !ref condition

    !(absCondition condition x)
}
!ref abs

#Fonction de création de la classe Rectangle
!{.

	#RECTANGLE : à modifier
	#fonction de calcul de la hauteur
	!{.
		!(self y1)
		!ref y1
		!(self y2)
		!(!a - y1)
		!ref h
		h
		abs

	}
	!ref fonctionHauteur
		
	#RECTANGLE : à modifier
	#fonction de calcul de la largeur	
	
	!{.
		!(self x1)
		!ref x1
		!(self x2)
		!(!a - x1)
		!ref l
        l
        abs
	}
	!ref fonctionLargeur	
	
	#fonction de calcul du périmètre
	
	!{.
		!(self hauteur)
		!ref h
		!(self largeur)
		!ref l
		!(h + l)
		!(!a * 2)		
	}
	!ref fonctionPerimetre

	#fonction de calcul de l'aire
	
	#définition des membres
	("x1" "y1" "x2" "y2")
	
	#définition des méthodes
	["hauteur" fonctionHauteur "largeur" fonctionLargeur "perimetre" fonctionPerimetre]
	
	#Définition de la classe
	!(Class new)	
}
#interprète la fonction qu'on vient de créer.
!a

!ref Rectangle

!(int new 3)
!ref a
!(int new 17)
!ref b
!(int new 9)
!ref c
!(int new 45)
!ref d

!(Rectangle new a b c d)
!ref rect



!(rect hauteur)
pint
!(rect largeur)
pint
!(rect perimetre)
pint
!(int new 17)
!ref e
!(int new 23)
!ref f
!(int new 5)
!ref g
!(int new 10)
!ref h

!(Rectangle new e f g h)
!ref rect2

!(rect2 hauteur)
pint
!(rect2 largeur)
pint
!(rect2 perimetre)
pint

